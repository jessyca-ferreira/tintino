from fastapi import APIRouter, HTTPException, Depends, UploadFile, File, WebSocket, WebSocketDisconnect, Form
from typing import List
import traceback
import asyncio
import json

from api.schemas.messages import Chat, MiniChat, SubmitImageMessage, SubmitImageHandler, Message
from api.services.chat import new_chat, continue_chat, continue_chat_async
from api.utils.logger import get_logger
from api.services.messages import submit_image, generate_feedback_audio
from api.database import db
from api.auth import verify_token, verify_token_string

logger = get_logger(__name__)

router = APIRouter(
    prefix="/api/chats",
    tags=["Chats"],
    responses={
        401: {"description": "Token de autentica√ß√£o inv√°lido"},
        500: {"description": "Erro interno do servidor"}
    }
)

@router.post(
    "/", 
    response_model=Chat, 
    status_code=201,
    summary="Criar novo chat",
    description="""
    Inicia uma nova hist√≥ria interativa baseada em √°udio.
    
    - Recebe um arquivo de √°udio com a instru√ß√£o inicial
    - Transcreve o √°udio e gera a primeira parte da hist√≥ria
    - Cria elementos visuais para desenho
    - Retorna o chat completo com primeira mensagem
    
    O √°udio deve conter uma instru√ß√£o clara sobre que tipo de hist√≥ria
    a crian√ßa gostaria de ouvir (ex: "uma hist√≥ria sobre dinossauros").
    """,
    responses={
        201: {"description": "Chat criado com sucesso"},
        400: {"description": "Arquivo de √°udio inv√°lido"},
    }
)

async def create_chat(
    voice_audio: UploadFile,
    voice_name: str = Form(default="Kore"),
    user_id: str = Depends(verify_token)
):
    try:
        chat = await new_chat(user_id, voice_audio, voice_name) #type:ignore
        logger.info(f"Chat de T√≠tulo: {chat.title} - ID: {chat.chat_id}")
        return chat
    except HTTPException as http_exc:
        logger.error(f"Erro ao criar chat: {http_exc.detail}")
        raise http_exc
    except Exception as e:
        logger.error(f"Erro ao criar chat: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail="Internal Server Error")

from api.schemas.messages import ChatsAndVoicesResponse

@router.get(
    "/", 
    response_model=ChatsAndVoicesResponse, 
    status_code=200,
    summary="Listar chats do usu√°rio",
    description="""
    Retorna todos os chats (hist√≥rias) do usu√°rio autenticado.
    
    - Lista resumida com informa√ß√µes b√°sicas de cada chat
    - Ordenado por √∫ltima atualiza√ß√£o
    - Inclui t√≠tulo, emoji e timestamp de cada hist√≥ria
    """,
    responses={
        200: {"description": "Lista de chats retornada com sucesso"},
    }
)
async def get_chats(user_id: str = Depends(verify_token)):
    from api.models.core import core_model
    try:
        user = db.get_user(user_id)
        return {
            "chats": user.chats,
            "available_voices": getattr(core_model, "voice_names", ["Kore"])
        }
    except HTTPException as http_exc:
        logger.error(f"Erro ao buscar chats: {http_exc.detail}")
        raise http_exc
    except Exception as e:
        logger.error(f"Erro ao buscar chats: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail="Internal Server Error")

@router.get(
    "/{chat_id}", 
    response_model=Chat, 
    status_code=200,
    summary="Obter chat espec√≠fico",
    description="""
    Retorna um chat completo com todo o hist√≥rico.
    
    - Inclui todas as mensagens da hist√≥ria
    - Cont√©m submiss√µes de desenho e feedback
    - Verifica se o chat pertence ao usu√°rio autenticado
    """,
    responses={
        200: {"description": "Chat retornado com sucesso"},
        403: {"description": "Chat n√£o pertence ao usu√°rio"},
        404: {"description": "Chat n√£o encontrado"},
    }
)
async def get_chat(
    chat_id: str,
    user_id: str = Depends(verify_token),
):
    try:
        chat = db.get_chat(chat_id, user_id)  # type: ignore
        # Limita as mensagens vis√≠veis a len(submits) + 1 para evitar expor pr√©-geradas indevidamente
        allowed = len(chat.subimits) + 1
        chat.messages = chat.messages[:allowed]
        return chat
    except HTTPException as http_exc:
        logger.error(f"Erro ao buscar chat: {http_exc.detail}")
        raise http_exc
    except Exception as e:
        logger.error(f"Erro ao buscar chat: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail="Internal Server Error")

@router.post(
    "/{chat_id}/submit_image", 
    response_model=SubmitImageMessage, 
    status_code=201,
    summary="Submeter desenho",
    description="""
    Permite que a crian√ßa submeta um desenho para avalia√ß√£o.
    
    - Analisa se o desenho corresponde ao solicitado na hist√≥ria
    - Gera feedback positivo e construtivo via √°udio
    - Se correto: salva a imagem e continua a hist√≥ria
    - Se incorreto: fornece dicas para melhorar
    
    A imagem deve estar em formato compat√≠vel (JPEG, PNG) e representar
    o elemento solicitado na √∫ltima mensagem da hist√≥ria.
    """,
    responses={
        201: {"description": "Desenho submetido e avaliado com sucesso"},
        400: {"description": "Imagem inv√°lida ou formato n√£o suportado"},
        404: {"description": "Chat ou mensagem n√£o encontrada"},
    }
)
async def submit_image_api(
    chat_id: str,
    image: UploadFile = File(..., description="Arquivo de imagem com o desenho da crian√ßa"),
    user_id: str = Depends(verify_token)
):
    try:
        chat = db.get_chat(chat_id, user_id)
        message_index = len(chat.subimits)
        
        logger.debug(f"Submetendo desenho {message_index} do chat : {chat.chat_id}")
        

        result = await submit_image(chat_id, chat.messages[-1].paint_image, image, user_id)
        image_path = None
        if result.is_correct:
            logger.info(f"Imagem submetida corretamente para o chat: {chat_id}, entregando mensagem pr√©-processada.")
            image_path = await db.store_user_archive(user_id, image)
            feedback_audio = "Fale de uma maneira energ√©tica, elogiando o desenho da crian√ßa com essas palavras: "

            # Entregar a pending_message se existir
            pending = db.pop_pending_message(chat_id)
            if pending:
                # Adiciona a mensagem pr√©-processada ao chat
                db.update_chat(user_id, chat_id, 'messages', Message(**pending))
                # Iniciar gera√ß√£o da pr√≥xima mensagem em background
                def _generate_next():
                    try:
                        logger.info(f"Pr√©-processando nova mensagem para o chat: {chat_id}")
                        from api.services.messages import new_message
                        next_msg = new_message(user_id, chat_id, pending['message_index'] + 1)
                        db.set_pending_message(chat_id, next_msg.model_dump())
                        logger.info(f"Nova mensagem pr√©-processada salva para o chat: {chat_id}")
                    except Exception as e:
                        logger.error(f"Erro ao pr√©-processar nova mensagem: {e}")
                import threading
                threading.Thread(target=_generate_next, daemon=True).start()
            else:
                logger.warning(f"Nenhuma mensagem pr√©-processada encontrada para o chat: {chat_id}")
        else:
            logger.info(f"Imagem submetida incorretamente para o chat: {chat_id}, gerando feedback.")
            feedback_audio = "Fale de uma maneira apasiguadora, incentivando a crian√ßa a melhorar seu desenho com essas palavras: "

        feedback = generate_feedback_audio(result, feedback_audio, user_id, chat_id, message_index, image_path)
        return feedback
    
    except HTTPException as http_exc:
        logger.error(f"Erro ao submeter imagem: {http_exc.detail}")
        raise http_exc
    
    except Exception as e:
        logger.error(f"Erro ao submeter imagem: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail="Internal Server Error")

@router.get(
    "/{chat_id}/submit_image_ws/docs",
    status_code=200,
    summary="Documenta√ß√£o do WebSocket para submiss√£o de desenho",
    description="""
    **üìã DOCUMENTA√á√ÉO DO WEBSOCKET**
    
    Este endpoint documenta como usar o WebSocket para submiss√£o de desenhos com notifica√ß√£o em tempo real.
    
    **üîó URL do WebSocket:**
    ```
    ws://localhost:8000/api/chats/{chat_id}/submit_image_ws
    ```
    
    **üéØ Prop√≥sito:**
    - Permite submiss√£o de desenhos com feedback em tempo real
    - Se o desenho estiver correto, o usu√°rio √© notificado quando a nova parte da hist√≥ria estiver pronta
    - Evita a necessidade de polling ou requests adicionais
    
    **üìä Fluxo de Comunica√ß√£o:**
    
    1. **Conex√£o**: Cliente conecta ao WebSocket
    2. **Autentica√ß√£o**: Cliente envia token de autentica√ß√£o
    3. **Submiss√£o**: Cliente envia dados da imagem (base64)
    4. **Avalia√ß√£o**: Servidor analisa o desenho
    5. **Feedback**: Servidor envia feedback de √°udio
    6. **Continua√ß√£o**: Se correto, mant√©m conex√£o e gera nova mensagem
    7. **Notifica√ß√£o**: Servidor envia nova mensagem quando pronta
    8. **Encerramento**: Conex√£o √© fechada
    
    **üì§ Mensagens do Cliente para Servidor:**
    
    **Autentica√ß√£o:**
    ```json
    {
        "type": "auth",
        "token": "jwt_token_here"
    }
    ```
    
    **Submiss√£o de Imagem:**
    ```json
    {
        "type": "submit_image",
        "image_data": "base64_encoded_image_data",
        "mime_type": "image/jpeg"
    }
    ```
    
    **üì• Mensagens do Servidor para Cliente:**
    
    **Feedback da Avalia√ß√£o:**
    ```json
    {
        "type": "feedback",
        "message": {
            "message_index": 1,
            "audio": "path/to/feedback/audio.wav",
            "data": {
                "is_correct": true,
                "feedback": "Muito bem! Seu desenho est√° perfeito!"
            },
            "image": "path/to/stored/image.jpg"
        }
    }
    ```
    
    **Nova Mensagem da Hist√≥ria (apenas se desenho correto):**
    ```json
    {
        "type": "new_message",
        "message": {
            "message_index": 2,
            "paint_image": "casa",
            "text_voice": "Era uma vez uma casa muito especial...",
            "intro_voice": "Agora desenhe uma casa!",
            "scene_image_description": "Uma bela casa colorida no campo",
            "image": "path/to/scene/image.jpg",
            "audio": "path/to/story/audio.wav"
        }
    }
    ```
    
    **Erro:**
    ```json
    {
        "type": "error",
        "message": "Descri√ß√£o do erro"
    }
    ```
    
    **üîÑ Estados da Conex√£o:**
    - **Conectado** ‚Üí Aguardando autentica√ß√£o
    - **Autenticado** ‚Üí Aguardando imagem
    - **Processando** ‚Üí Avaliando desenho
    - **Feedback enviado** ‚Üí Conex√£o fechada (se incorreto) ou aguardando nova mensagem (se correto)
    - **Nova mensagem** ‚Üí Conex√£o fechada
    
    **‚öñÔ∏è Compara√ß√£o com REST:**
    
    | Aspecto | REST `/submit_image` | WebSocket `/submit_image_ws` |
    |---------|---------------------|------------------------------|
    | **Resposta** | Apenas feedback inicial | Feedback + Nova mensagem (se correto) |
    | **Notifica√ß√£o** | N√£o | Sim, em tempo real |
    | **Polling** | Necess√°rio | N√£o necess√°rio |
    | **Complexidade** | Simples | Moderada |
    | **Experi√™ncia** | B√°sica | Flu√≠da |
    
    **üí° Quando usar:**
    - **REST**: Para integra√ß√µes simples ou quando WebSockets n√£o s√£o suportados
    - **WebSocket**: Para interfaces de usu√°rio que precisam de notifica√ß√£o em tempo real
    
    **üõ†Ô∏è Exemplo de Implementa√ß√£o JavaScript:**
    ```javascript
    const ws = new WebSocket('ws://localhost:8000/api/chats/chat_id/submit_image_ws');
    
    ws.onopen = () => {
        // 1. Autenticar
        ws.send(JSON.stringify({
            type: 'auth',
            token: 'seu_token_aqui'
        }));
        
        // 2. Enviar imagem
        ws.send(JSON.stringify({
            type: 'submit_image',
            image_data: canvas.toDataURL().split(',')[1],
            mime_type: 'image/jpeg'
        }));
    };
    
    ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        if (data.type === 'feedback') {
            console.log('Feedback:', data.message);
        } else if (data.type === 'new_message') {
            console.log('Nova mensagem:', data.message);
        }
    };
    ```
    
    **üîß Ferramentas de Teste:**
    - **Postman**: Suporta teste de WebSockets
    - **wscat**: `npm install -g wscat`
    - **Browser DevTools**: Console do navegador
    """,
    responses={
        200: {"description": "Documenta√ß√£o do WebSocket retornada"},
    },
    tags=["WebSocket Documentation"]
)
async def get_websocket_docs(chat_id: str):
    """
    Retorna a documenta√ß√£o completa do WebSocket para submiss√£o de desenhos.
    
    Este endpoint existe apenas para documentar o WebSocket correspondente,
    j√° que WebSockets n√£o aparecem automaticamente no Swagger/OpenAPI.
    """
    return {
        "websocket_url": f"/api/chats/{chat_id}/submit_image_ws",
        "documentation": "Consulte a descri√ß√£o completa acima para detalhes de implementa√ß√£o",
        "status": "WebSocket ativo e funcional",
        "alternative_rest_endpoint": f"/api/chats/{chat_id}/submit_image"
    }

@router.websocket("/{chat_id}/submit_image_ws")
@router.websocket("/{chat_id}/submit_image_ws/")
async def submit_image_websocket(
    websocket: WebSocket,
    chat_id: str
):
    """
    WebSocket endpoint para submiss√£o de imagem com notifica√ß√£o em tempo real.
    
    **Fluxo de Comunica√ß√£o:**
    
    1. **Conex√£o**: Cliente conecta ao WebSocket
    2. **Autentica√ß√£o**: Cliente envia token de autentica√ß√£o
    3. **Submiss√£o**: Cliente envia dados da imagem (base64)
    4. **Avalia√ß√£o**: Servidor analisa o desenho
    5. **Feedback**: Servidor envia feedback de √°udio
    6. **Continua√ß√£o**: Se correto, mant√©m conex√£o e gera nova mensagem
    7. **Notifica√ß√£o**: Servidor envia nova mensagem quando pronta
    8. **Encerramento**: Conex√£o √© fechada
    
    **Mensagens do Cliente para Servidor:**
    ```json
    {
        "type": "auth",
        "token": "jwt_token_here"
    }
    ```
    ```json
    {
        "type": "submit_image",
        "image_data": "base64_encoded_image",
        "mime_type": "image/jpeg"
    }
    ```
    
    **Mensagens do Servidor para Cliente:**
    ```json
    {
        "type": "feedback",
        "message": {
            "message_index": 1,
            "audio": "path/to/feedback/audio.wav",
            "data": {
                "is_correct": true,
                "feedback": "Muito bem! Seu desenho est√° perfeito!"
            },
            "image": "path/to/stored/image.jpg"
        }
    }
    ```
    ```json
    {
        "type": "new_message",
        "message": {
            "message_index": 2,
            "paint_image": "casa",
            "text_voice": "Era uma vez...",
            "intro_voice": "Agora desenhe uma casa!",
            "scene_image_description": "Uma bela casa colorida",
            "image": "path/to/scene/image.jpg",
            "audio": "path/to/story/audio.wav"
        }
    }
    ```
    ```json
    {
        "type": "error",
        "message": "Descri√ß√£o do erro"
    }
    ```
    
    **Estados da Conex√£o:**
    - Conectado ‚Üí Aguardando autentica√ß√£o
    - Autenticado ‚Üí Aguardando imagem
    - Processando ‚Üí Avaliando desenho
    - Feedback enviado ‚Üí Conex√£o fechada (se incorreto) ou aguardando nova mensagem (se correto)
    - Nova mensagem ‚Üí Conex√£o fechada
    
    **Compatibilidade:**
    Este endpoint complementa o endpoint REST `/submit_image`. 
    Clientes podem escolher usar REST (resposta √∫nica) ou WebSocket (notifica√ß√£o em tempo real).
    """
    
    # Aceita a conex√£o o quanto antes; token ser√° verificado logo em seguida
    await websocket.accept()
    user_id = None
    
    try:
        # 1. Aguarda autentica√ß√£o (primeira mensagem deve conter token)
        auth_data = await websocket.receive_json()
        
        if auth_data.get("type") != "auth":
            await websocket.send_json({
                "type": "error", 
                "message": "Primeira mensagem deve ser de autentica√ß√£o"
            })
            await websocket.close()
            return
        
        # Verifica o token
        try:
            user_id = verify_token_string(auth_data.get("token"))
        except Exception:
            await websocket.send_json({
                "type": "error", 
                "message": "Token de autentica√ß√£o inv√°lido"
            })
            await websocket.close()
            return
        
        # 2. Aguarda dados da imagem
        image_data = await websocket.receive_json()
        
        if image_data.get("type") != "submit_image":
            await websocket.send_json({
                "type": "error", 
                "message": "Esperando submiss√£o de imagem"
            })
            await websocket.close()
            return
        
        # 3. Processa a submiss√£o da imagem
        chat = db.get_chat(chat_id, user_id)
        message_index = len(chat.subimits)
        
        logger.debug(f"WebSocket: Submetendo desenho {message_index} do chat: {chat.chat_id}")
        
        # Converte dados base64 de volta para UploadFile simulado
        import base64
        import io
        from fastapi import UploadFile
        
        image_bytes = base64.b64decode(image_data.get("image_data"))
        image_file = UploadFile(
            filename="drawing.jpg",
            file=io.BytesIO(image_bytes)
        )
        
        # Avalia o desenho
        expected_draw = chat.messages[len(chat.subimits)].paint_image
        result = await submit_image(chat_id, expected_draw, image_file, user_id)

        # 4. Processa resultado e gera feedback
        image_path = None
        if result.is_correct:
            logger.info(f"WebSocket: Imagem submetida corretamente para o chat: {chat_id}")
            image_path = await db.store_user_archive(user_id, image_file)
            feedback_audio = "Fale de uma maneira energ√©tica, elogiando o desenho da crian√ßa com essas palavras: "
        else:
            logger.info(f"WebSocket: Imagem submetida incorretamente para o chat: {chat_id}, era esperado um {expected_draw}")
            feedback_audio = "Fale de uma maneira apasiguadora, incentivando a crian√ßa a melhorar seu desenho com essas palavras: "
        
        # Gera feedback de √°udio
        feedback = generate_feedback_audio(result, feedback_audio, user_id, chat_id, message_index, image_path)
        
        # 5. Envia feedback para o cliente
        await websocket.send_json({
            "type": "feedback",
            "message": {
                "message_index": feedback.message_index,
                "audio": feedback.audio,
                "data": {
                    "is_correct": result.is_correct,
                    "feedback": result.feedback
                },
                "image": feedback.image
            }
        })
        
        # 6. Se correto, usa mensagem pr√©-processada (pending) e dispara a pr√≥xima em background
        if result.is_correct:
            # Consumir pending message caso exista
            pending = db.pop_pending_message(chat_id)
            if pending:
                try:
                    msg = Message(**pending)
                    # Persistir a mensagem e enviar imediatamente
                    db.update_chat(user_id, chat_id, 'messages', msg)
                    await websocket.send_json({
                        "type": "new_message",
                        "message": {
                            "message_index": msg.message_index,
                            "paint_image": msg.paint_image,
                            "text_voice": msg.text_voice,
                            "intro_voice": msg.intro_voice,
                            "scene_image_description": msg.scene_image_description,
                            "image": msg.image,
                            "audio": msg.audio
                        }
                    })
                    logger.info(f"WebSocket: Nova mensagem (pending) enviada para o chat: {chat_id}")
                except Exception as e:
                    logger.error(f"WebSocket: Erro ao usar mensagem pending: {e}")
            else:
                logger.info(f"WebSocket: Sem mensagem pending; gerando nova mensagem agora para o chat: {chat_id}")
                
                # Callback para enviar nova mensagem quando pronta
                async def send_new_message(message: Message):
                    try:
                        await websocket.send_json({
                            "type": "new_message",
                            "message": {
                                "message_index": message.message_index,
                                "paint_image": message.paint_image,
                                "text_voice": message.text_voice,
                                "intro_voice": message.intro_voice,
                                "scene_image_description": message.scene_image_description,
                                "image": message.image,
                                "audio": message.audio
                            }
                        })
                        logger.info(f"WebSocket: Nova mensagem enviada para o chat: {chat_id}")
                    except Exception as e:
                        logger.error(f"WebSocket: Erro ao enviar nova mensagem: {e}")
                
                # Gera nova mensagem de forma ass√≠ncrona
                _ = await continue_chat_async(user_id, chat_id, message_index + 1, send_new_message)

            # Iniciar gera√ß√£o da pr√≥xima pending em background
            import threading
            from api.services.messages import new_message as generate_new_message
            def _prefetch_next():
                try:
                    next_index = message_index + 1 if not pending else pending.get('message_index', message_index) + 1
                    logger.info(f"WebSocket: Pr√©-processando pr√≥xima mensagem {next_index} para o chat: {chat_id}")
                    next_msg = generate_new_message(user_id, chat_id, next_index)
                    db.set_pending_message(chat_id, next_msg.model_dump())
                    logger.info(f"WebSocket: Pr√≥xima mensagem pr√©-processada salva para o chat: {chat_id}")
                except Exception as e:
                    logger.error(f"WebSocket: Erro ao pr√©-processar pr√≥xima mensagem: {e}")
            threading.Thread(target=_prefetch_next, daemon=True).start()
        
        # 7. Fecha conex√£o
        await websocket.close()
        
    except WebSocketDisconnect:
        logger.info(f"WebSocket: Cliente desconectou do chat: {chat_id}")
    
    except Exception as e:
        logger.error(f"WebSocket: Erro durante submiss√£o de imagem: {e}")
        logger.error(traceback.format_exc())
        
        try:
            await websocket.send_json({
                "type": "error",
                "message": "Erro interno do servidor"
            })
            await websocket.close()
        except:
            pass